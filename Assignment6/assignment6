//A vampire number v is a number with an even number of digits n, that can be factored into two numbers x and y each with n/2 digits and not both with trailing zeroes, where v contains precisely all the digits from x and from y, in any order. Write a java program to print first 100 vampire numbers.




package assignments.Assignment6;

import java.util.ArrayList;
import java.util.Iterator;

public class Assignment6 {
    static ArrayList<String> list = new ArrayList();

    static void permute(String str, int l) {
        if (l == str.length() - 1) {
            list.add(str);
        } else {
            for(int i = l; i <= str.length() - 1; ++i) {
                str = swap(str, l, i);
                permute(str, l + 1);
                str = swap(str, l, i);
            }
        }

    }

    static String swap(String a, int i, int j) {
        char[] charArray = a.toCharArray();
        char temp = charArray[i];
        charArray[i] = charArray[j];
        charArray[j] = temp;
        return String.valueOf(charArray);
    }

    public static void main(String[] args) {
        int n = 1200;
        int count = 1;

        while(true) {
            while(count <=100) {
                String num = String.valueOf(n);
                if (num.length() % 2 != 0) {
                    ++n;
                } else {
                    permute(num, 0);
                    Iterator var = list.iterator();
                    while(var.hasNext()) {
                        String s = (String)var.next();
                        String first = s.substring(0, num.length() / 2);
                        String second = s.substring(num.length() / 2, num.length());
                        boolean bothContainTrailingZero = first.charAt(first.length() - 1) == '0' && second.charAt(second.length() - 1) == '0';
                        if (!bothContainTrailingZero && Integer.parseInt(first) * Integer.parseInt(second) == n) {
                            System.out.println(num);
                            ++count;
                            break;
                        }
                    }

                    ++n;
                    list.clear();
                }
            }

            return;
        }
    }
}

